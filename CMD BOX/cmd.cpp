#include <iostream>
#include <windows.h>
#include <string>
#include <math.h>
#include <iomanip>
#include <fstream>
#include <vector>

using namespace std;
void TextColor(int color) {SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);}

// h√†m g·ªçi api window l·∫•y th√¥ng tin ph·∫ßn c·ª©ng
string getMainboardInfo() {
    HKEY hKey;
    const char* subKey = "HARDWARE\\DESCRIPTION\\System\\BIOS";
    if (RegOpenKeyExA(HKEY_LOCAL_MACHINE, subKey, 0, KEY_READ, &hKey) != ERROR_SUCCESS)
        return "Unknown Mainboard";

    char buf[256];
    DWORD bufSize = sizeof(buf);
    DWORD type = 0;

    // Th·ª≠ ƒë·ªçc Manufacturer
    if (RegQueryValueExA(hKey, "BaseBoardManufacturer", NULL, &type, (LPBYTE)buf, &bufSize) != ERROR_SUCCESS) {
        RegCloseKey(hKey);
        return "Unknown Mainboard";
    }
    string manufacturer(buf);

    bufSize = sizeof(buf);
    if (RegQueryValueExA(hKey, "BaseBoardProduct", NULL, &type, (LPBYTE)buf, &bufSize) != ERROR_SUCCESS) {
        RegCloseKey(hKey);
        return manufacturer;
    }
    string product(buf);

    RegCloseKey(hKey);
    return manufacturer + " " + product;
}

string getBIOSVersion() {
    HKEY hKey;
    const char* subKey = "HARDWARE\\DESCRIPTION\\System\\BIOS";
    if (RegOpenKeyExA(HKEY_LOCAL_MACHINE, subKey, 0, KEY_READ, &hKey) != ERROR_SUCCESS)
        return "Unknown BIOS";

    char buf[256];
    DWORD bufSize = sizeof(buf);
    DWORD type = 0;

    if (RegQueryValueExA(hKey, "BIOSVersion", NULL, &type, (LPBYTE)buf, &bufSize) != ERROR_SUCCESS) {
        RegCloseKey(hKey);
        return "Unknown BIOS";
    }

    RegCloseKey(hKey);
    return string(buf);
}

string getDiskInfo(const string& driveLetter) {
    ULARGE_INTEGER freeBytesAvailable, totalBytes, freeBytes;
    if (GetDiskFreeSpaceExA(driveLetter.c_str(), &freeBytesAvailable, &totalBytes, &freeBytes)) {
        double totalGB = (double)totalBytes.QuadPart / (1024 * 1024 * 1024);
        double freeGB  = (double)freeBytes.QuadPart / (1024 * 1024 * 1024);

        ostringstream oss;
        oss << "Total: " << fixed << setprecision(2) << totalGB
            << " GB, Free: " << freeGB << " GB";
        return oss.str();
    }
    return "Disk info unavailable";
}

string getBatteryInfo() {
    SYSTEM_POWER_STATUS sps;
    if (GetSystemPowerStatus(&sps)) {
        string status;
        if (sps.ACLineStatus == 1) status = "‚ö° Charging";
        else if (sps.ACLineStatus == 0) status = "üîã On Battery";
        else status = "‚ùì Unknown";
        return to_string((int)sps.BatteryLifePercent) + "% " + status;
    }
    return "Unavailable";
}

string getCPUName() {
    HKEY hKey = NULL;
    const char* subKey = "HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0";
    LONG res = RegOpenKeyExA(HKEY_LOCAL_MACHINE, subKey, 0, KEY_READ, &hKey);
    if (res != ERROR_SUCCESS || hKey == NULL) {
        if (hKey) RegCloseKey(hKey);
        return "Unknown CPU";
    }

    CHAR buffer[512];
    DWORD bufSize = sizeof(buffer);
    DWORD type = 0;
    res = RegQueryValueExA(hKey, "ProcessorNameString", NULL, &type, (LPBYTE)buffer, &bufSize);
    RegCloseKey(hKey);

    if (res != ERROR_SUCCESS) return "Unknown CPU";
    // ensure null-terminated
    buffer[(bufSize > 0 && bufSize < sizeof(buffer)) ? bufSize - 1 : sizeof(buffer) - 1] = '\0';
    return string(buffer);
}

string getTotalRAM() {
    MEMORYSTATUSEX ms;
    ms.dwLength = sizeof(ms);
    if (!GlobalMemoryStatusEx(&ms)) return "Unknown RAM";

    // total physical memory in bytes -> convert to GB
    double totalGB = (double)ms.ullTotalPhys / (1024.0 * 1024.0 * 1024.0);
    // format to 2 decimal places
    ostringstream oss;
    oss << fixed << setprecision(2) << totalGB << " GB";
    return oss.str();
}
//----------------------------------------------------------

void software(int choice){
    switch (choice){
    case 1:{  system("cls");  system("wmic product get name,version");  system("pause"); }break;
    case 2:{ system("cls");  system("tasklist");  system("pause"); }break;
    case 3:system("control");break;
    }
}

void hardware(int choice){ int number;
    switch (choice){
    case 4: {system("cls");
    cout << "\t========= THONG TIN HE THONG =======\n";
    TextColor(2);
    cout << "\n\t[CPU] " << getCPUName() << "\n";
    TextColor(3);
    cout << "\n\t[RAM] " << getTotalRAM() << "\n";
    TextColor(4);
    cout << "\n\t[PIN] " << getBatteryInfo() << "\n";
    TextColor(5);
    cout << "\n\t[MAINBOARD] " << getMainboardInfo() << "\n";
    TextColor(6);
    cout << "\n\t[BIOS] " << getBIOSVersion() << "\n";
    TextColor(7);
    cout << "\n\t[DISK C] " << getDiskInfo("C:\\") << "\n";
    system("pause");TextColor(7);
    }break;
    case 5:{system("driverquery");system("pause"); }break;
    case 6:{
        cout << "\n\tüîã ƒêang t·∫°o b√°o c√°o pin laptop...\n";
        system("powercfg /batteryreport /output C:\\battery_report.html");
        cout << "\tüìÑ B√°o c√°o ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: C:\\battery_report.html\n";
        cout << "\tüëâ ƒêang m·ªü b√°o c√°o...\n";
        system("start C:\\battery_report.html");
        break;
    }
    case 7:system("dxdiag");  break;
    case 8:{system("cls"); int number;
        do{system("cls");
            cout << "\n\tƒê·ªò S√ÅNG (1 --> 100) | Tho√°t = 0 : ";cin >> number;
            cout << "\n";

            if (number == 0) break; // Tho√°t v√≤ng l·∫∑p n·∫øu nh·∫≠p 0

            if (number < 1 || number > 100){
                cout << "\t‚ö†Ô∏è  Sai gi√° tr·ªã! Nh·∫≠p t·ª´ 1 ƒë·∫øn 100.\n\n";
                Sleep(1000);
                continue; // Quay l·∫°i ƒë·∫ßu v√≤ng l·∫∑p
            }
            string cmd = "powershell -Command \"(Get-WmiObject -Namespace root/wmi -Class WmiMonitorBrightnessMethods).WmiSetBrightness(1," + to_string(number) + ")\"";
            system(cmd.c_str());
        } while (true);
        break;
    }
    case 9: system("powershell (Add-Type '[DllImport(\"user32.dll\")]^public static extern int SendMessage(int hWnd, int hMsg, int wParam, int lParam);' -name a -pas)::SendMessage(-1, 0x0112, 0xF170, 2)");break;
    }
}

void networking(int choice){
    switch (choice){
    case 10:{system("cls"); system("ipconfig/all"); system("pause"); }break;
    case 11:{system("cls");system("ipconfig/renew"); system("pause");  }break;
    case 12:{system("cls");
        string wifi;
        cout << "\n\tNh·∫≠p t√™n WiFi mu·ªën xem m·∫≠t kh·∫©u: "; cin >> ws; getline(cin, wifi); // cho ph√©p nh·∫≠p c√≥ kho·∫£ng tr·∫Øng
        string cmd = "netsh wlan show profiles name=\"" + wifi + "\" key=clear";
        system(cmd.c_str());  system("pause");
    }break;
    }
}

void fix_error_and_system_maintenance(int choice){
    switch (choice){
    case 13:{ system("cleanmgr"); }break;
    case 14:{system("rd /s /q \"%TEMP%\" && md \"%TEMP%\""); system("pause"); }break;
    case 15: system("shutdown /r /t 0"); break;
    case 16:{  cout << "\n\tƒêang qu√©t virus nhanh. Vui l√≤ng ch·ªù...\n";
        system("cmd /c \"\"%ProgramFiles%\\Windows Defender\\MpCmdRun.exe\" -Scan -ScanType 1\"");
        system("pause");
    }break;
    case 17:{ cout << "\n\tƒêang th·ª±c hi·ªán qu√©t virus to√†n b·ªô. Vui l√≤ng ch·ªù...\n";
        system("cmd /c \"\"%ProgramFiles%\\Windows Defender\\MpCmdRun.exe\" -Scan -ScanType 2\"");  
        system("pause");
    }break;
    case 18:{
        string command = "sfc/scannow";
        string powershell_cmd = "powershell -Command \"Start-Process cmd -Verb RunAs -ArgumentList '/k " + command + "'\"";
        system(powershell_cmd.c_str());
    }break;
    case 19:{
        string command = "chkdsk";
        string powershell_cmd = "powershell -Command \"Start-Process cmd -Verb RunAs -ArgumentList '/k " + command + "'\"";  
        system(powershell_cmd.c_str());
    }break;
    }
}

void administrator_and_system(int choice){
    switch (choice){
    case 20:system("taskmgr");break;
    case 21:system("regedit"); break;
    case 22:system("services.msc"); break;
    case 23:system("devmgmt.msc"); break;
    case 24: system("compmgmt.msc"); break;
    case 25: system("rundll32.exe user32.dll,LockWorkStation"); break;
    case 26:{cout<<"\n";
        cout<<"\t1.TURN ONL\t2.TURN OFF\n";
        cout<<"\t---> ";cin>>choice;
        switch(choice){
            case 1:{system("sc config wuauserv start= demand && net start wuauserv"); break;}
            case 2:{system("net stop wuauserv && sc config wuauserv start= disabled");break;}
        }
    }break;
    }
}

void intro() {system("cls");
    string cpu = getCPUName();
    string ram = getTotalRAM();
    string battery = getBatteryInfo();

    TextColor(2);
    cout << "\n\t‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
    TextColor(3);
    cout << "\tüöÄ  Version: 1.0+            | ";
    TextColor(3);
    cout << "CPU: " << cpu << "\n";
    TextColor(4);
    cout << "\tüë®‚Äçüíª  By: Huiinguyen üõ†Ô∏è‚öôÔ∏è‚úÖ    | ";
    TextColor(4);
    cout << "RAM: " << ram << "\n";
    TextColor(5);
    cout << "\tüåê  Language: C++, Python üêç | ";
    TextColor(5);
    cout << "Battery: " << battery << "\n";
    TextColor(2);
    cout << "\t‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
    TextColor(7);
}

/*
void SOS(int choice) {

}
*/

void function(int choice) {
    system("cls");
    TextColor(3); // M√†u xanh lam/cyan cho ti√™u ƒë·ªÅ n·ªïi b·∫≠t
    cout << "\t‚ö°Ô∏è¬† SYSTEM UTILITY TOOLKIT ‚öôÔ∏è | PH√ÇN T√çCH & L·ªò TR√åNH\n";
    TextColor(7); // Tr·∫Øng

    cout << "\tüü¢¬† **HI·ªÜN TR·∫†NG PHI√äN B·∫¢N (Current Release):**\n";
    TextColor(11); // V√†ng nh·∫°t cho c√°c ƒë·∫ßu m·ª•c
    cout << "\t¬† ¬†‚Ä¢ üíª **Software Management:** Qu·∫£n l√Ω Ph·∫ßn m·ªÅm, Ti·∫øn tr√¨nh, Control Panel.\n";
    cout << "\t¬† ¬†‚Ä¢ üíæ **Hardware Diagnostics:** CPU, RAM, BIOS, Mainboard, Disk, Battery Information...\n";
    cout << "\t¬† ¬†‚Ä¢ üåê **Network Interrogation:** IP Configuration, WiFi Status, IP Renewal Protocol.\n";
    cout << "\t¬† ¬†‚Ä¢ üõ°Ô∏è **System Maintenance:** Antivirus Scan, SFC, CHKDSK, Deep Cleanup Utility.\n";
    cout << "\t¬† ¬†‚Ä¢ üîë **Administrative Access:** Taskmgr, Registry Editor, Services Control, Lock Screen, Windows Update.\n\n";
    TextColor(7);

    cout << "\tüöÄ **L·ªò TR√åNH PH√ÅT TRI·ªÇN (ROADMAP üõ£Ô∏è):**\n";
    TextColor(10); // Xanh l√° c√¢y
    cout << "\t¬† ¬†[PHASE 1] - T·ªëi ∆∞u & M·ªü r·ªông\n";
    cout << "\t¬† ¬†1. **üö® SOS Module:** B·ªï sung C√îNG C·ª§ C·ª®U H·ªò KH·∫®N C·∫§P h·ªá th·ªëng.\n";
    cout << "\t¬† ¬†2. **üé® User Interface:** T√πy ch·ªânh Giao di·ªán ƒê·ªông (Color Themes, Window Resize).\n";
    cout << "\t¬† ¬†3. **üìÑ Data Export:** Xu·∫•t B√°o c√°o Hi·ªáu nƒÉng H·ªá th·ªëng ra file (TXT, HTML - ƒë·ªãnh d·∫°ng chuy√™n nghi·ªáp).\n";
    cout << "\t¬† ¬†4. **üì° Advanced API:** T√≠ch h·ª£p s√¢u h∆°n v√†o Windows Core (WMI, COM Objects - Truy c·∫≠p c·∫•p ƒë·ªô Kernel).\n";
    cout << "\t¬† ¬†5. **‚öôÔ∏è Multi-Threading:** B·ªï sung Module Python/Async cho x·ª≠ l√Ω song song, tƒÉng t·ªëc ƒë·ªô ph·∫£n h·ªìi.\n\n";
    TextColor(7);

    cout << "\tüéØ **T·∫¶M NH√åN (VISION):**\n";
    cout << "\t¬† ¬†=> **KI·∫æN T·∫†O** m·ªôt **ALL-IN-ONE UTILITY SUITE** m·∫°nh m·∫Ω cho B·∫£o tr√¨ & Ki·ªÉm so√°t Windows.\n";
    cout << "\t¬† ¬†¬† ¬†**·ª®ng d·ª•ng:** H·ªçc thu·∫≠t, Nghi√™n c·ª©u Chuy√™n s√¢u v√† H·ªó tr·ª£ K·ªπ thu·∫≠t Th·ª±c t·∫ø.\n\n";

    TextColor(4); // M√†u ƒë·ªè/h·ªìng n·ªïi b·∫≠t cho ph·∫ßn k·∫øt
    cout << "\t==================================================================\n";
    TextColor(7);

    system("pause");
}
void maintain(){int cmd;
    do{ intro();
        cout << "\t‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n";
        cout << "\t‚îÇ          SOFTWARE                 ‚îÇ                    HARDWARE                        ‚îÇ\n";
        cout << "\t‚îÇ 1. LI·ªÜT K√ä PH·∫¶N M·ªÄM T·∫¢I V·ªÄ        ‚îÇ 4. TH√îNG TIN PH·∫¶N C·ª®NG    5.DANH S√ÅCH DRIVER       ‚îÇ\n";
        cout << "\t‚îÇ 2. QU·∫¢N L√ù TI·∫æN TR√åNH             ‚îÇ 6. B√ÅO C√ÅO PIN(laptop)    7. C√îNG C·ª§ DIRECTX       ‚îÇ\n";
        cout << "\t‚îÇ 3. CONTROL PANEL                  ‚îÇ 8. ƒê·ªò S√ÅNG M√ÄN H√åNH       9. T·∫ÆT M√ÄN H√åNH          ‚îÇ\n";
        cout << "\t‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
        cout << "\t‚îÇ          NETTWORKING              ‚îÇ         FIX ERROR && SYSTEM MAINTENANCE            ‚îÇ\n";
        cout << "\t‚îÇ 10. XEM IP V√Ä C·∫§U H√åNH M·∫†NG       ‚îÇ 13. X√ìA R√ÅC ·ªî C·ª®NG       14. X√ìA R√ÅC TH∆Ø M·ª§C 'TEMP ‚îÇ\n";
        cout << "\t‚îÇ 11. C·∫¨P NH·∫¨T IP                   ‚îÇ 15. KH·ªûI ƒê·ªòNG M√ÅY        16. QU√âT NHANH VIRUS      ‚îÇ\n";
        cout << "\t‚îÇ 12. M·∫¨T KH·∫®U WIFI                 ‚îÇ 17. QU√âT FULL VIRUS      18. QU√âT & S·ª¨A FILE L·ªñI   ‚îÇ\n";
        cout << "\t‚îÇ                                   ‚îÇ 19. QU√âT ·ªî C·ª®NG                                    ‚îÇ\n";
        cout << "\t‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
        cout << "\t‚îÇ                           ADMINISTRATION AND SYSTEMS                                   ‚îÇ\n";
        cout << "\t‚îÇ 20. TASK MANAGER        21. REGISTRY      22. QU·∫¢N L√ù D·ªäCH V·ª§    23. QU·∫¢N L√ù THI·∫æT B·ªä  ‚îÇ\n";
        cout << "\t‚îÇ 24. QU·∫¢N L√ù M√ÅY T√çNH    25. KH√ìA M√ÅY T·∫†M TH·ªúI    26. T·∫ÆT/B·∫¨T(WINDOW UPDATE)            ‚îÇ\n";
        cout << "\t‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n";
        cout << "\t‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n";
        cout << "\t‚îÇ  27. CH∆Ø∆†NG TR√åNH KH·∫®N C·∫§P(comming soon)      28.FUNCTION           0.EXIT             ‚îÇ\n";
        cout << "\t‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n";
        cout << "\tNHAP SO--> ";cin >> cmd;
        if (cmd >= 1 && cmd <= 3)software(cmd);
        else if (cmd >= 4 && cmd <= 9)hardware(cmd);
        else if (cmd >= 10 && cmd <= 12)networking(cmd);
        else if (cmd >= 13 && cmd <= 19)fix_error_and_system_maintenance(cmd);
        else if (cmd >= 20 && cmd <= 26)administrator_and_system(cmd);
        //  if(cmd==27) SOS(cmd);
        if(cmd==28) function(cmd);
    } while (cmd != 0);
}

int main() {
    maintain(); 
    return 0;
}