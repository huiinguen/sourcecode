import tkinter as tk
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from tkinter import filedialog, messagebox
import requests
from bs4 import BeautifulSoup
import os
from urllib.parse import urljoin, urlparse
import threading
from datetime import datetime
from PIL import Image
from io import BytesIO

def create_image_crawler_frame(parent):
    frame = ttk.Frame(parent, padding=10)

    ttk.Label(frame, text="üñºÔ∏è C√†o ·∫£nh t·ª´ website", font=("Helvetica", 16, "bold"), bootstyle=PRIMARY).pack(pady=10)

    # √î nh·∫≠p link
    ttk.Label(frame, text="üîó Nh·∫≠p link website:", bootstyle=SECONDARY).pack(anchor="w")
    url_entry = ttk.Entry(frame, width=70, bootstyle=PRIMARY)
    url_entry.pack(pady=5, fill="x")

    # Ch·ªçn th∆∞ m·ª•c l∆∞u
    save_dir = tk.StringVar(value=os.path.join(os.getcwd(), "images"))
    path_frame = ttk.Frame(frame)
    path_frame.pack(fill="x", pady=5)
    ttk.Label(path_frame, text="üìÇ Th∆∞ m·ª•c l∆∞u ·∫£nh:", bootstyle=SECONDARY).pack(side="left")
    path_entry = ttk.Entry(path_frame, textvariable=save_dir, width=50)
    path_entry.pack(side="left", padx=5, fill="x", expand=True)

    def choose_dir():
        folder = filedialog.askdirectory()
        if folder:
            save_dir.set(folder)
    ttk.Button(path_frame, text="Ch·ªçn...", command=choose_dir, bootstyle=INFO).pack(side="left")

    # Ghi ch√∫ v·ªÅ t√≠nh nƒÉng
    ttk.Label(frame, text="üõ†Ô∏è Ch·∫ø ƒë·ªô: C√†o t·∫•t c·∫£ ·∫£nh tr√™n trang", font=("Helvetica", 12, "italic"), bootstyle=SUCCESS).pack(anchor="w", pady=10)
    ttk.Label(frame, text="üîç C√°c t√≠nh nƒÉng kh√°c (c√†o theo t·ª´ kh√≥a, AI) ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...", font=("Helvetica", 10), bootstyle=INFO).pack(anchor="w")

    # Khu v·ª±c log v√† thanh ti·∫øn tr√¨nh
    log_text = tk.Text(frame, height=12, wrap="word", bg="#1e1e1e", fg="#0f0", font=("Consolas", 10))
    log_text.pack(fill="both", expand=True, pady=(10, 5))
    
    progress_bar = ttk.Progressbar(frame, mode="determinate", bootstyle=SUCCESS)
    progress_bar.pack(fill="x", pady=5)

    def log(msg):
        log_text.insert(tk.END, msg + "\n")
        log_text.see(tk.END)

    def crawl_images(url, base_folder):
        try:
            log("üåê ƒêang k·∫øt n·ªëi...")
            domain = urlparse(url).netloc.replace("www.", "")
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            folder = os.path.join(base_folder, f"{domain}_{timestamp}")
            os.makedirs(folder, exist_ok=True)
            log(f"üìÇ Th∆∞ m·ª•c ·∫£nh: {folder}")

            response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
            if response.status_code != 200:
                log(f"‚ùå L·ªói t·∫£i trang: {response.status_code}")
                return

            soup = BeautifulSoup(response.text, "html.parser")
            img_tags = soup.find_all("img")
            
            log(f"üîç T√¨m th·∫•y {len(img_tags)} ·∫£nh tr√™n trang.")
            
            img_urls_to_download = [urljoin(url, img.get("src")) for img in img_tags if img.get("src")]
            
            log(f"‚úÖ T√¨m th·∫•y {len(img_urls_to_download)} ·∫£nh ƒë·ªÉ t·∫£i v·ªÅ.")
            
            if not img_urls_to_download:
                log("‚ùó Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o.")
                progress_bar['value'] = 0
                return
            
            progress_bar['maximum'] = len(img_urls_to_download)
            
            for idx, img_url in enumerate(img_urls_to_download, start=1):
                try:
                    response = requests.get(img_url, timeout=10)
                    if response.status_code != 200:
                        log(f"‚ö†Ô∏è L·ªói t·∫£i ·∫£nh ({response.status_code}): {img_url}")
                        continue
                        
                    file_name = os.path.basename(urlparse(img_url).path)
                    if not file_name.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                        file_name = f"image_{idx}.jpg"
                    
                    file_path = os.path.join(folder, file_name)
                    
                    try:
                        img_data = response.content
                        Image.open(BytesIO(img_data)).verify() 
                        with open(file_path, "wb") as f:
                            f.write(img_data)
                        log(f"‚úÖ ƒê√£ l∆∞u ({idx}/{len(img_urls_to_download)}): {file_name}")
                    except (IOError, OSError) as e:
                        log(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω file ·∫£nh: {file_name}. B·ªè qua.")
                        continue
                        
                except Exception as e:
                    log(f"‚ùå L·ªói khi t·∫£i ·∫£nh: {e}")
                
                progress_bar['value'] = idx
                
            log("üéâ Ho√†n t·∫•t qu√° tr√¨nh c√†o ·∫£nh!")
            
        except requests.exceptions.RequestException as e:
            log(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        except Exception as e:
            log(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        finally:
            progress_bar['value'] = 0
            
    def start_crawl():
        url = url_entry.get().strip()
        folder = save_dir.get()
        
        if not url:
            log("‚ùå Vui l√≤ng nh·∫≠p link website.")
            return

        log_text.delete("1.0", tk.END) 
        threading.Thread(target=crawl_images, args=(url, folder,), daemon=True).start()

    # N√∫t ƒëi·ªÅu khi·ªÉn
    btn_frame = ttk.Frame(frame)
    btn_frame.pack(pady=10)
    ttk.Button(btn_frame, text="üöÄ B·∫Øt ƒë·∫ßu c√†o ·∫£nh", bootstyle=SUCCESS, command=start_crawl).pack(side="left", padx=5)

    ttk.Label(frame, text="üìå Ghi ch√∫: Th∆∞ m·ª•c ·∫£nh ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o theo domain + th·ªùi gian.", 
              font=("Helvetica", 9), bootstyle=INFO, justify="left").pack(pady=10, anchor="w")

    frame.pack(fill="both", expand=True)
    return frame
# --- PH·∫¶N B·ªî SUNG ƒê·ªÇ CH·∫†Y ƒê·ªòC L·∫¨P ---
if __name__ == "__main__":
    # Kh·ªüi t·∫°o c·ª≠a s·ªï ch√≠nh v·ªõi ttkbootstrap
    app = ttk.Window(themename="superhero") # C√≥ th·ªÉ ch·ªçn theme kh√°c, v√≠ d·ª•: "superhero", "darkly", "cosmo"
    app.title("Image Crawler GUI - C√¥ng c·ª• C√†o ·∫£nh")
    app.geometry("800x650") # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ª≠a s·ªï

    # T·∫°o frame c√†o ·∫£nh v√† ƒë·∫∑t n√≥ v√†o c·ª≠a s·ªï ch√≠nh
    crawler_frame = create_image_crawler_frame(app)
    
    # Ch·∫°y v√≤ng l·∫∑p s·ª± ki·ªán ch√≠nh c·ªßa tkinter
    app.mainloop()